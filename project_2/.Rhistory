)
)
# server function
server = function(input, output) {
# reactive data based on year selection ---
react_data = reactive({
select_year = as.numeric(input$select)
return(data_food[data_food$Year == select_year, ])
})
output$plot1 = renderPlot({
# used data based on selection from reactive ---
current_data = react_data()
# use food_plot() from helper_functions.R ---
food_plot(current_data, input$select)
})
output$plot2 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use visits_plot() from helper_functions.R---
visits_plot(current_data, input$select)
})
output$plot3 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use food_provided() from helper_functions.R---
food_provided(current_data, input$select)
})
}
shinyApp(ui = ui, server = server)
source("helper_functions.R")
# read in data
data_food = load_data("data/UMD_Services_Provided_20190719.tsv")
# User interface
ui = dashboardPage(
# Header w/ title ---
dashboardHeader(title = "Urban Ministries of Durham: Food Data",
titleWidth = 400),
# remove sidebar for this app
dashboardSidebar(disable = TRUE),
# plot in main body ---
dashboardBody(
# row-based layout for plot ---
fluidRow(
# first box with plots ---
box(title = "Food Barplot", status = "primary", plotOutput("plot1", height = 250)),
# Tab box with plots 2 and 3 line graphs ---
tabBox(
tabPanel(title = "Visitors Line Graph", status = "primary", plotOutput("plot2", height = 250)),
tabPanel(title = "Sum of People Receiving Food", status = "primary", plotOutput("plot3", height = 250))
)
),
fluidRow(
# Third box for select input ---
box(
title = "Select Year", status = "warning",
# "You can select which year you want to see",
selectInput(inputId = "select", label = "Choose Year for Monthly Data",
choices = 2000:2019, selectize = FALSE)
),
# Fourth box for description of data ---
box(
title = "Description of Data", width = 6, background = "light-blue",
"UMD has collected data on food distribution over the years.
Food pounds have been recorded, as well as amount of people for whom food was provided.
Choose a year to see monthly observations. Some years do not contain data.
What trends can you notice over the years?"
)
)
)
)
# server function
server = function(input, output) {
# reactive data based on year selection ---
react_data = reactive({
select_year = as.numeric(input$select)
return(data_food[data_food$Year == select_year, ])
})
output$plot1 = renderPlot({
# used data based on selection from reactive ---
current_data = react_data()
# use food_plot() from helper_functions.R ---
food_plot(current_data, input$select)
})
output$plot2 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use visits_plot() from helper_functions.R---
visits_plot(current_data, input$select)
})
output$plot3 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use food_provided() from helper_functions.R---
food_provided(current_data, input$select)
})
}
shinyApp(ui = ui, server = server)
source("helper_functions.R")
# read in data
data_food = load_data("data/UMD_Services_Provided_20190719.tsv")
# User interface
ui = dashboardPage(
# Header w/ title ---
dashboardHeader(title = "Urban Ministries of Durham: Food Data",
titleWidth = 400),
# remove sidebar for this app
dashboardSidebar(disable = TRUE),
# plot in main body ---
dashboardBody(
# row-based layout for plot ---
fluidRow(
# first box with plots ---
box(title = "Food Barplot", status = "primary", plotOutput("plot1", height = 250)),
# Tab box with plots 2 and 3 line graphs ---
tabBox(
tabPanel(title = "Visitors Line Graph", status = "primary", plotOutput("plot2", height = 250)),
tabPanel(title = "Sum of People Receiving Food", status = "primary", plotOutput("plot3", height = 250))
)
),
fluidRow(
# Third box for select input ---
box(
title = "Select Year", status = "warning",
# "You can select which year you want to see",
selectInput(inputId = "select", label = "Choose Year for Monthly Data",
choices = 2000:2019, selectize = FALSE)
),
# Fourth box for description of data ---
box(
title = "Description of Data", width = 6, background = "light-blue",
"UMD has collected data on food distribution over the years.
Food pounds have been recorded, as well as amount of people for whom food was provided.
Choose a year to see monthly observations. Some years do not contain data.
What trends can you notice over the years?"
)
)
)
)
# server function
server = function(input, output) {
# reactive data based on year selection ---
react_data = reactive({
select_year = as.numeric(input$select)
return(data_food[data_food$Year == select_year, ])
})
output$plot1 = renderPlot({
# used data based on selection from reactive ---
current_data = react_data()
# use food_plot() from helper_functions.R ---
food_plot(current_data, input$select)
})
output$plot2 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use visits_plot() from helper_functions.R---
visits_plot(current_data, input$select)
})
output$plot3 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use food_provided() from helper_functions.R---
food_provided(current_data, input$select)
})
}
shinyApp(ui = ui, server = server)
?as.Date()
# path: "data/UMD_Services_Provided_20190719.tsv"
load_data = function(x) {
umd_data <- read_tsv(x)
umd_data2 <- umd_data %>%
select(-`Client File Merge`, -`Field1`, -`Field2`, -`Field3`)
umd_data2$Date <- as.Date(umd_data2$Date, "%m/%d/%Y")
# food data, select target variables, drop NAs, filter for 2000 - 2019, change date format
umd_food <- umd_data2 %>%
select(Date, `Client File Number`, `Food Provided for`, `Food Pounds`) %>%
drop_na(`Food Provided for`,`Food Pounds`) %>%
filter(Date >= "2000-01-01", Date <= "2019-12-31", `Food Pounds` < 100, `Food Provided for` < 100) %>%
separate(Date, into = c("Year", "Month", "Day"), sep = "-")
food_summary <- umd_food %>%
group_by(Year, Month) %>%
summarise(
count = n(),
lbs_per_prsn = sum(`Food Pounds`) / sum(`Food Provided for`),
food_pounds_sum = sum(`Food Pounds`, na.rm = TRUE),
ppl_sum = sum(`Food Provided for`, na.rm = TRUE),
ppl_avg = mean(`Food Provided for`, na.rm = TRUE)
)
return(food_summary)
}
food_plot = function(x, y) {
# plot food pounds annually in a bar graph
x %>%
mutate(month2 = as.Date(paste0("2019-", Month, "-01"), "%Y-%m-%d")) %>%
ggplot(mapping = aes(x = month2, y = food_pounds_sum)) +
geom_bar(stat = "identity", fill = "darkorchid4") +
labs(title = paste0("Monthly Pounds of Food: ", y),
x = "Month",
y = "Food Pounds") + theme_bw(base_size = 15) +
scale_x_date(
#limits = c(as.Date("2019-01-01"), as.Date("2019-12-31")),
date_minor_breaks = "1 month",
date_labels = "%b") # this last function creates the missing months for visual purposes
}
visits_plot = function(x, y){
x %>%
mutate(month2 = as.Date(paste0("2019-", Month, "-01"), "%Y-%m-%d")) %>%
ggplot(mapping = aes(x = month2, y = count)) +
geom_point() +
geom_line() +
labs(title = paste0("Visits per month: ", y),
x = "Month",
y = "Visits per Month") + theme_bw(base_size = 15) +
scale_x_date(
limits = c(as.Date("2019-01-01"), as.Date("2019-12-01")),
date_minor_breaks = "2 weeks",
date_labels = "%b") # this last function creates the missing months for visual purposes
}
food_provided = function(x, y) {
x %>%
mutate(month2 = as.Date(paste0("2019-", Month, "-01"), "%Y-%m-%d")) %>%
ggplot(mapping = aes(x = month2, y = ppl_sum)) +
geom_point() +
geom_line() +
labs(title = paste0("Sum of People Receiving Food: ", y),
x = "Month",
y = "Food Provided for") + theme_bw(base_size = 15) +
scale_x_date(
limits = c(as.Date("2019-01-01"), as.Date("2019-12-01")),
date_minor_breaks = "1 month",
date_labels = "%b") # this last function creates the missing months for visual purposes
}
source("helper_functions.R")
# read in data
data_food = load_data("data/UMD_Services_Provided_20190719.tsv")
# User interface
ui = dashboardPage(
# Header w/ title ---
dashboardHeader(title = "Urban Ministries of Durham: Food Data",
titleWidth = 400),
# remove sidebar for this app
dashboardSidebar(disable = TRUE),
# plot in main body ---
dashboardBody(
# row-based layout for plot ---
fluidRow(
# first box with plots ---
box(title = "Food Barplot", status = "primary", plotOutput("plot1", height = 250)),
# Tab box with plots 2 and 3 line graphs ---
tabBox(
tabPanel(title = "Visitors Line Graph", status = "primary", plotOutput("plot2", height = 250)),
tabPanel(title = "Sum of People Receiving Food", status = "primary", plotOutput("plot3", height = 250))
)
),
fluidRow(
# Third box for select input ---
box(
title = "Select Year", status = "warning",
# "You can select which year you want to see",
selectInput(inputId = "select", label = "Choose Year for Monthly Data",
choices = 2000:2019, selectize = FALSE)
),
# Fourth box for description of data ---
box(
title = "Description of Data", width = 6, background = "light-blue",
"UMD has collected data on food distribution over the years.
Food pounds have been recorded, as well as amount of people for whom food was provided.
Choose a year to see monthly observations. Some years do not contain data.
What trends can you notice over the years?"
)
)
)
)
# server function
server = function(input, output) {
# reactive data based on year selection ---
react_data = reactive({
select_year = as.numeric(input$select)
return(data_food[data_food$Year == select_year, ])
})
output$plot1 = renderPlot({
# used data based on selection from reactive ---
current_data = react_data()
# use food_plot() from helper_functions.R ---
food_plot(current_data, input$select)
})
output$plot2 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use visits_plot() from helper_functions.R---
visits_plot(current_data, input$select)
})
output$plot3 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use food_provided() from helper_functions.R---
food_provided(current_data, input$select)
})
}
shinyApp(ui = ui, server = server)
source("helper_functions.R")
# read in data
data_food = load_data("data/UMD_Services_Provided_20190719.tsv")
# User interface
ui = dashboardPage(
# Header w/ title ---
dashboardHeader(title = "Urban Ministries of Durham: Food Data",
titleWidth = 400),
# remove sidebar for this app
dashboardSidebar(disable = TRUE),
# plot in main body ---
dashboardBody(
# row-based layout for plot ---
fluidRow(
# first box with plots ---
box(title = "Food Barplot", status = "primary", plotOutput("plot1", height = 250)),
# Tab box with plots 2 and 3 line graphs ---
tabBox(
tabPanel(title = "Visitors Line Graph", status = "primary", plotOutput("plot2", height = 250)),
tabPanel(title = "Sum of People Receiving Food", status = "primary", plotOutput("plot3", height = 250))
)
),
fluidRow(
# Third box for select input ---
box(
title = "Select Year", status = "warning",
# "You can select which year you want to see",
selectInput(inputId = "select", label = "Choose Year for Monthly Data",
choices = 2000:2019, selectize = FALSE)
),
# Fourth box for description of data ---
box(
title = "Description of Data", width = 6, background = "light-blue",
"UMD has collected data on food distribution over the years.
Food pounds have been recorded, as well as amount of people for whom food was provided.
Choose a year to see monthly observations. Some years do not contain data.
What trends can you notice over the years?"
)
)
)
)
# server function
server = function(input, output) {
# reactive data based on year selection ---
react_data = reactive({
select_year = as.numeric(input$select)
return(data_food[data_food$Year == select_year, ])
})
output$plot1 = renderPlot({
# used data based on selection from reactive ---
current_data = react_data()
# use food_plot() from helper_functions.R ---
food_plot(current_data, input$select)
})
output$plot2 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use visits_plot() from helper_functions.R---
visits_plot(current_data, input$select)
})
output$plot3 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use food_provided() from helper_functions.R---
food_provided(current_data, input$select)
})
}
shinyApp(ui = ui, server = server)
getwd()
library(rsconnect)
deployApp("/Users/alfredorojas/Dropbox/BIOS_611_2019/GitHub/bios611-projects-fall-2019-ajLuna7/project_2")
source("helper_functions.R")
# read in data
data_food = load_data("data/UMD_Services_Provided_20190719.tsv")
# User interface
ui = dashboardPage(
# Header w/ title ---
dashboardHeader(title = "Urban Ministries of Durham: Food Data",
titleWidth = 400),
# remove sidebar for this app
dashboardSidebar(disable = TRUE),
# plot in main body ---
dashboardBody(
# row-based layout for plot ---
fluidRow(
# first box with plots ---
box(title = "Food Barplot", status = "primary", plotOutput("plot1", height = 250)),
# Tab box with plots 2 and 3 line graphs ---
tabBox(
tabPanel(title = "Visitors Line Graph", status = "primary", plotOutput("plot2", height = 250)),
tabPanel(title = "Sum of People Receiving Food", status = "primary", plotOutput("plot3", height = 250))
)
),
fluidRow(
# Third box for select input ---
box(
title = "Select Year", status = "warning",
# "You can select which year you want to see",
selectInput(inputId = "select", label = "Choose Year for Monthly Data",
choices = 2000:2019, selectize = FALSE)
),
# Fourth box for description of data ---
box(
title = "Description of Data", width = 6, background = "light-blue",
"UMD has collected data on food distribution over the years.
Food pounds have been recorded, as well as amount of people for whom food was provided.
Choose a year to see monthly observations. Some years do not contain data.
What trends can you notice over the years?"
)
)
)
)
# server function
server = function(input, output) {
# reactive data based on year selection ---
react_data = reactive({
select_year = as.numeric(input$select)
return(data_food[data_food$Year == select_year, ])
})
output$plot1 = renderPlot({
# used data based on selection from reactive ---
current_data = react_data()
# use food_plot() from helper_functions.R ---
food_plot(current_data, input$select)
})
output$plot2 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use visits_plot() from helper_functions.R---
visits_plot(current_data, input$select)
})
output$plot3 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use food_provided() from helper_functions.R---
food_provided(current_data, input$select)
})
}
shinyApp(ui = ui, server = server)
getwd()
deployApp("/Users/alfredorojas/Dropbox/BIOS_611_2019/GitHub/bios611-projects-fall-2019-ajLuna7/project_2")
source("helper_functions.R")
# read in data
data_food = load_data("data/UMD_Services_Provided_20190719.tsv")
# User interface
ui = dashboardPage(
# Header w/ title ---
dashboardHeader(title = "Urban Ministries of Durham: Food Data",
titleWidth = 400),
# remove sidebar for this app
dashboardSidebar(disable = TRUE),
# plot in main body ---
dashboardBody(
# row-based layout for plot ---
fluidRow(
# first box with plots ---
box(title = "Food Barplot", status = "primary", plotOutput("plot1", height = 250)),
# Tab box with plots 2 and 3 line graphs ---
tabBox(
tabPanel(title = "Visitors Line Graph", status = "primary", plotOutput("plot2", height = 250)),
tabPanel(title = "Sum of People Receiving Food", status = "primary", plotOutput("plot3", height = 250))
)
),
fluidRow(
# Third box for select input ---
box(
title = "Select Year", status = "warning",
# "You can select which year you want to see",
selectInput(inputId = "select", label = "Choose Year for Monthly Data",
choices = 2000:2019, selectize = FALSE)
),
# Fourth box for description of data ---
box(
title = "Description of Data", width = 6, background = "light-blue",
"UMD has collected data on food distribution over the years.
Food pounds have been recorded, as well as amount of people for whom food was provided.
Choose a year to see monthly observations. Some years do not contain data.
What trends can you notice over the years?"
)
)
)
)
# server function
server = function(input, output) {
# reactive data based on year selection ---
react_data = reactive({
select_year = as.numeric(input$select)
return(data_food[data_food$Year == select_year, ])
})
output$plot1 = renderPlot({
# used data based on selection from reactive ---
current_data = react_data()
# use food_plot() from helper_functions.R ---
food_plot(current_data, input$select)
})
output$plot2 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use visits_plot() from helper_functions.R---
visits_plot(current_data, input$select)
})
output$plot3 = renderPlot({
# used data based on selection from reactive --
current_data = react_data()
# use food_provided() from helper_functions.R---
food_provided(current_data, input$select)
})
}
shinyApp(ui = ui, server = server)
getwd()
deployApp(/Users/alfredorojas/Dropbox/BIOS_611_2019/GitHub/bios611-projects-fall-2019-ajLuna7/project_2"")
deployApp(/Users/alfredorojas/Dropbox/BIOS_611_2019/GitHub/bios611-projects-fall-2019-ajLuna7/project_2")
deployApp("/Users/alfredorojas/Dropbox/BIOS_611_2019/GitHub/bios611-projects-fall-2019-ajLuna7/project_2")
