group_by(flight, arr_delay, assignment) %>%
summarise(
count = n()
)
# Which airlines contribute the most flights to each cluster? Are the results surprising?
#   How would you change the analysis based on this result? Write your responses as comments in
# your script.
new_flight %>%
group_by(carrier, arr_delay, assignment) %>%
summarise(
count = n()
)
# Which airlines contribute the most flights to each cluster? Are the results surprising?
#   How would you change the analysis based on this result? Write your responses as comments in
# your script.
x = new_flight %>%
group_by(carrier, arr_delay, assignment) %>%
summarise(
count = n()
)
View(x)
View(new_flight)
# Which airlines contribute the most flights to each cluster? Are the results surprising?
#   How would you change the analysis based on this result? Write your responses as comments in
# your script.
x = new_flight %>%
group_by(assignment, carrier) %>%
summarise(
summed = sum(abs(arr_delay))
)
x
View(x)
# Which airlines contribute the most flights to each cluster? Are the results surprising?
#   How would you change the analysis based on this result? Write your responses as comments in
# your script.
x = new_flight %>%
group_by(assignment, carrier) %>%
summarise(
sum_arr_delay = sum(abs(arr_delay))
)
arrange(x, desc(sum_arr_delay))
# Plot results as a scatter plot by dep_delay and arr_delay colored by cluster assignment
new_flight %>% ggplot(mapping = aes(x = dep_delay, y = arr_delay)) +
geom_point(aes(color = assignment), size = 2, alpha = 0.75)
library(tidyverse)
library(modelr)
# Generate example data
# y = 1x^2 + 0x + 0.5 + noise
set.seed(181117)
x = seq(0,10,0.1) # Notice the seq() function
y = x^2 + 0.5 + 3*rnorm(n=length(x))
data = tibble(x=x, y=y)
ggplot(data, aes(x,y)) +
geom_point(alpha=0.5, size=2)
library(tidyverse)
library(nycflights13)
library(nycflights13)
library(tidyverse)
library(nycflights13)
flights %>%
gather(dep_delay, arr_delay, key = "delay", value = "values") %>%
mutate(log_delay = log2(abs(values))) %>%
ggplot(mapping = aes(x = delay, y = log_delay)) +
geom_boxplot()
high_precip <- weather %>%
left_join(flights, by = c("year" = "year", "month" = "month",
"day" = "day", "hour" = "hour", "origin" = "origin")) %>%
filter(precip > quantile(precip, probs = 0.9)) %>%
group_by(carrier) %>%
summarise(count = n())
library(tidyverse)
library(caret)
# First, notice how halving one variable or another
# impacts the distance between observations
astronaut_df = tibble(astronaut_id = c(13, 45, 81),
age = c(36, 47, 38),
heart_rate = c(45, 52,42),
hours_in_space = c(2208, 3791, 1823))
# Exclude astronaut IDs
adf_0 = astronaut_df %>% select(-astronaut_id)
d0 = dist(adf_0)
adf_1 = adf_0
adf_1[1, 3] = 0.5 * adf_0[1, 3]
d1 = dist(adf_1 )
delta1 = (d1 - d0)/d0
delta1
adf_2 = adf_0
adf_2[1, 2] = 0.5 * adf_0[1, 2]
d2 = dist(adf_2)
delta2 = (d2 - d0)/d0
# Now standardize the data by converting to z-scores
# Test the distance scores again
astronaut_stnd_df = astronaut_df %>%
mutate(age = (age - mean(age))/sd(age),
heart_rate = (heart_rate - mean(heart_rate)) / sd(heart_rate),
hours_in_space = (hours_in_space - mean(hours_in_space)) / sd(hours_in_space))
adf_3 = astronaut_stnd_df %>% select(-astronaut_id)
d3 = dist(adf_3)
adf_4 = adf_3
adf_4[1, 3] = 0.5 * adf_3[1, 3]
d4 = dist(adf_4)
delta4 = (d4 - d3)/d3
adf_5 = adf_3
adf_5[1, 2] = 0.5 * adf_3[1, 2]
d5 = dist(adf_5)
delta5 = (d5 - d3)/d3
## Now let's standardize using caret
astro_preproc_vals = adf_0 %>%
preProcess(method = c("center", "scale"))
View(astro_preproc_vals)
typeof(astro_preproc_vals)
class(astro_preproc_vals)
astronaut_stnd_df_2 = predict(astro_preproc_vals, astronaut_df)
astro_preproc_vals
astronaut_stnd_df_2
## Overfitting
# Add a few more data points to astronaut data
library(modelr)
set.seed(0)
N = 20
ages = sample(seq(28,57), replace=T, size=N)
hours_in_space = ages * 100 - sample(seq(-500,500), replace=T, size=N)
astronaut_df = tibble(astronaut_id = c(c(13, 45, 81), seq(81+1,81+N,1)),
age = c(c(36, 47, 38), ages),
heart_rate = c(c(45, 52,42), sample(seq(38,61), replace=T, size=N)),
hours_in_space = c(c(2208, 3791, 1823), hours_in_space ))
ggplot(astronaut_df, aes(age, hours_in_space)) +
geom_point(size=2, alpha=0.5)
model1 = lm(hours_in_space ~ age, data = astronaut_df)
model5 = lm(hours_in_space ~ (age^5) + I(age^4) + I(age^3) + I(age^2) + age, data = astronaut_df)
model15 = lm(hours_in_space ~ I(age^15) + I(age^14) + I(age^13) + I(age^12) + I(age^11) + I(age^10) + I(age^9) + I(age^8) + I(age^7) + I(age^6) + I(age^5) + I(age^4) + I(age^3) + I(age^2) + age, data = astronaut_df)
overfit_model = astronaut_df %>%
data_grid(age) %>%
gather_predictions(model1, model5, model15) %>%
mutate(hours_in_space = pred)
ggplot(astronaut_df, aes(age, hours_in_space)) +
geom_point(size=2, alpha=0.5) +
geom_line(data=overfit_model, size=2, alpha=0.5, aes(color=factor(model)))
flights
library(tidyverse)
library(nycflights13)
flights
carrier_count <- flights %>%
group_by(carrier) %>%
summarise(count = n())
carrier_count
?mutate
# use left_join... is this the most appropriate join to use?
carrier_compare <- high_precip %>%
left_join(carrier_count, by = NULL) %>%
mutate(ratio = high_precip / left_join)
high_precip <- weather %>%
left_join(flights, by = c("year" = "year", "month" = "month",
"day" = "day", "hour" = "hour", "origin" = "origin")) %>%
filter(precip > quantile(precip, probs = 0.9)) %>%
group_by(carrier) %>%
summarise(count = n())
# Do the same carrier counting, but without the filter (on the flights dataframe)
carrier_count <- flights %>%
group_by(carrier) %>%
summarise(count = n())
# use left_join... is this the most appropriate join to use?
carrier_compare <- high_precip %>%
left_join(carrier_count, by = NULL) %>%
mutate(ratio = high_precip / left_join)
# use left_join... is this the most appropriate join to use?
carrier_compare <- high_precip %>%
left_join(carrier_count, by = "carrier") %>%
mutate(ratio = high_precip / left_join)
high_precip
carrier_count
?left_join
# use left_join... is this the most appropriate join to use?
carrier_compare <- high_precip %>%
left_join(carrier_count, by = "carrier") %>%
mutate(ratio = high_precip / left_join)
mutate(ratio = high_precip / left_join)
# use left_join... is this the most appropriate join to use?
carrier_compare <- high_precip %>%
print("hello")
# use left_join... is this the most appropriate join to use?
carrier_compare <- high_precip %>%
print("hello")
# use left_join... is this the most appropriate join to use?
carrier_compare <- high_precip %>%
print("hello")
# use left_join... is this the most appropriate join to use?
carrier_compare <- high_precip %>%
print("hello") %>%
left_join(carrier_count, by = "carrier") %>%
print("hello2") %>%
mutate(ratio = high_precip / left_join)
left_join(carrier_count, by = "carrier") %>%
print("hello2") %>%
mutate(ratio = high_precip / left_join)
high_precip %>%
print("hello")
left_join(carrier_count, by = "carrier") %>%
print("hello2") %>%
high_precip %>%
print("hello")
left_join(carrier_count, by = "carrier") %>%
print("hello2")
high_precip %>%
left_join(carrier_count, by = "carrier") %>%
print("hello2")
# use left_join... is this the most appropriate join to use?
carrier_compare <- high_precip %>%
left_join(carrier_count, by = "carrier") %>%
mutate(ratio = count.x / count.y)
carrier_compare
airlines
# use left_join... is this the most appropriate join to use?
carrier_compare <- high_precip %>%
left_join(carrier_count, by = "carrier") %>%
mutate(ratio = count.x / count.y) %>%
left_join(by = "carrier")
# use left_join... is this the most appropriate join to use?
carrier_compare <- high_precip %>%
left_join(carrier_count, by = "carrier") %>%
mutate(ratio = count.x / count.y) %>%
left_join(airlines, by = "carrier")
arrange(desc(carrier_compare))
arrange(desc(carrier_compare$ratio))
carrier_compare
arrange(carrier_compare, desc(ratio))
arrange(carrier_compare, desc(count.x))
library(tidyverse)
library(ggplot2)
library(mclust)
?read_csv
police_data <- read_csv(
url("https://raw.githubusercontent.com/fivethirtyeight/data/master/police-locals/police-locals.csv"),
na = '**')
#-------from class--------
# Determine an appropriate
# number of clusters for the
# data
#-------------------------
kmeans_wss <- Vectorize(function(c){
return(sum(kmeans(police_data, centers=c)$withinss))
})
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers), diff_wss = wss - lag(wss))
police_data
police_data <- police_data %>%
select(all, white, `non-white`)
police_data
return(sum(kmeans(police_data, centers=c)$withinss))
police_data <- read_csv(
url("https://raw.githubusercontent.com/fivethirtyeight/data/master/police-locals/police-locals.csv"),
na = '**')
# Set the random seed
set.seed(0)
# Generate example data set
N = 30
U1 = 1
U2 = 4.5
gene_df = rbind(tibble(gene_a = rnorm(n=N, mean=U2), gene_b = rnorm(n=N, mean=U1), explant_id = seq(1, N), type = 1),
tibble(gene_a = rnorm(n=N, mean=U1), gene_b = rnorm(n=N, mean=U1), explant_id = seq(N+1, 2*N), type = 2),
tibble(gene_a = rnorm(n=N, mean=U1), gene_b = rnorm(n=N, mean=U2), explant_id = seq((2*N)+1, 3*N), type = 3))
gene_df$type = as.factor(gene_df$type)
#-------------------------
# Determine an appropriate
# number of clusters for the
# data
#-------------------------
kmeans_wss <- Vectorize(function(c){
return(sum(kmeans(gene_df, centers=c)$withinss))
})
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers), diff_wss = wss - lag(wss))
cluster_fit
gene_df
police_data <- police_data %>%
select(all, white, `non-white`)
#-------from class--------
# Determine an appropriate
# number of clusters for the
# data
#-------------------------
kmeans_wss <- Vectorize(function(c){
return(sum(kmeans(police_data, centers=c)$withinss))
})
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers), diff_wss = wss - lag(wss))
cluster_fit
police_data <- read_csv(
url("https://raw.githubusercontent.com/fivethirtyeight/data/master/police-locals/police-locals.csv"),
na = '**')
police_data <- police_data %>%
select(all, white, `non-white`)
#-------from class--------
# Determine an appropriate
# number of clusters for the
# data
#-------------------------
kmeans_wss <- Vectorize(function(c){
return(sum(kmeans(police_data, centers=c)$withinss))
})
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers), diff_wss = wss - lag(wss))
ggplot(cluster_fit, aes(num_centers, diff_wss)) +
geom_point() +
geom_line() +
labs(x="Number of Clusters",
y="Within groups sum of squares")
# Cluster the cities using K-means, HAC, and EM algorithm
fit = police_data %>%
kmeans(4)
police_data$cluster <- as.factor(fit$cluster)
police_data <- read_csv(
url("https://raw.githubusercontent.com/fivethirtyeight/data/master/police-locals/police-locals.csv"),
na = '**')
police_data <- police_data %>%
select(city, all, white, `non-white`)
#-------from class--------
# Determine an appropriate
# number of clusters for the
# data
#-------------------------
kmeans_wss <- Vectorize(function(c){
return(sum(kmeans(police_data, centers=c)$withinss))
})
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers), diff_wss = wss - lag(wss))
#-------from class--------
# Determine an appropriate
# number of clusters for the
# data
#-------------------------
kmeans_wss <- Vectorize(function(c){
return(sum(kmeans(police_data, centers=c)$withinss))
})
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers), diff_wss = wss - lag(wss))
police_data$city <- as.factor(police_data$city)
#-------from class--------
# Determine an appropriate
# number of clusters for the
# data
#-------------------------
kmeans_wss <- Vectorize(function(c){
return(sum(kmeans(police_data, centers=c)$withinss))
})
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers), diff_wss = wss - lag(wss))
#-------from class--------
# Determine an appropriate
# number of clusters for the
# data
#-------------------------
kmeans_wss <- Vectorize(function(c){
return(sum(kmeans(police_data, centers=c)$withinss))
})
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers))
return(sum(kmeans(no_city, centers=c)$withinss))
#-------from class--------
# Determine an appropriate
# number of clusters for the
# data
#-------------------------
kmeans_wss <- Vectorize(function(c){
no_city = police_data %>%
select(all, white, `non-white`)
return(sum(kmeans(no_city, centers=c)$withinss))
})
cluster_fit = tibble(num_centers=1:15) %>%
mutate(wss = kmeans_wss(num_centers))
ggplot(cluster_fit, aes(num_centers, diff_wss)) +
geom_point() +
geom_line() +
labs(x="Number of Clusters",
y="Within groups sum of squares")
ggplot(cluster_fit, aes(num_centers, wss)) +
geom_point() +
geom_line() +
labs(x="Number of Clusters",
y="Within groups sum of squares")
# Cluster the cities using K-means, HAC, and EM algorithm
fit = police_data %>%
kmeans(4)
police_data$cluster <- as.factor(fit$cluster)
ggplot(police_data, mapping(aes(x = white, y = `non-white`))) +
geom_point(alpha = 0.75, size = 2, aes(color = city))
ggplot(police_data, mapping(aes(x = white, y = `non-white`))) +
geom_point(alpha = 0.75, size = 2, aes(color = cluster))
police_data
ggplot(police_data, mapping = aes(x = white, y = `non-white`)) +
geom_point(alpha = 0.75, size = 2, aes(color = cluster))
ggplot(police_data, mapping = aes(x = white, y = `non-white`)) +
geom_point(alpha = 0.75, size = 2, aes(color = cluster, fill = city))
ggplot(police_data, mapping = aes(x = white, y = `non-white`)) +
geom_point(alpha = 0.75, size = 2, aes(color = city, fill = cluster))
ggplot(police_data, mapping = aes(x = white, y = `non-white`)) +
geom_point(alpha = 0.75, size = 2, aes(label = city, fill = cluster))
?geom_point
ggplot(police_data, mapping = aes(x = white, y = `non-white`)) +
geom_point(alpha = 0.75, size = 2, aes(group = city, fill = cluster))
ggplot(police_data, mapping = aes(x = white, y = `non-white`)) +
geom_label(aes(label = city, fill = cluster))
library(tidyverse)
library(shiny)
library(shinydashboard)
setwd("~/Dropbox/BIOS_611_2019/GitHub/bios611-projects-fall-2019-ajLuna7/project_2")
source("helper_functions.R")
data_food = load_data("data/UMD_Services_Provided_20190719.tsv")
ui = dashboardPage(
dashboardHeader(title = "Urban Ministries of Durham Data Exploration"),
dashboardSidebar(),
dashboardBody()
)
server = function(input, outpout) {
# something
}
shinyApp(ui = ui, server = server)
server = function(input, output) {
# something
}
shinyApp(ui = ui, server = server)
ui = dashboardPage(
dashboardHeader(title = "Urban Ministries of Durham Data Exploration"),
dashboardSidebar(),
# plot in main body ---
dashboardBody(
# row-based layout for plot ---
fluidRow(
# first box with plot ---
box(title = "Monthly Pounds of Food", status = "primary", plotOutput("plot1", height = 250)),
# Second box for select input ---
box(
title = "Select", status = "warning",
"You can select which year", br(), "you want to see",
selectInput(inputId = "select", label = "Choose Year", choices = 2000:2019)
)
)
)
)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
source("helper_functions.R")
data_food = load_data("data/UMD_Services_Provided_20190719.tsv")
View(data_food)
?paste0
source("helper_functions.R")
data_food = load_data("data/UMD_Services_Provided_20190719.tsv")
ui = dashboardPage(
dashboardHeader(title = "Urban Ministries of Durham Data Exploration"),
dashboardSidebar(),
# plot in main body ---
dashboardBody(
# row-based layout for plot ---
fluidRow(
# first box with plot ---
box(title = "Monthly Pounds of Food", status = "primary", plotOutput("plot1", height = 250)),
# Second box for select input ---
box(
title = "Select", status = "warning",
"You can select which year", br(), "you want to see",
selectInput(inputId = "select", label = "Choose Year", choices = 2000:2019)
)
)
)
)
server = function(input, output) {
# reactive data based on year selection ---
react_data = reactive({
select_year = as.numeric(input$select)
return(data_food[data_food$Year == select_year], )
})
output$plot1 = renderPlot({
# used data based on selection from reactive ---
current_data = react_data()
# use food_plot() from helper_functions.R ---
food_plot(current_data, select_year)
})
}
shinyApp(ui = ui, server = server)
server = function(input, output) {
# reactive data based on year selection ---
react_data = reactive({
select_year = as.numeric(input$select)
return(data_food[data_food$Year == select_year, ])
})
output$plot1 = renderPlot({
# used data based on selection from reactive ---
current_data = react_data()
# use food_plot() from helper_functions.R ---
food_plot(current_data, select_year)
})
}
shinyApp(ui = ui, server = server)
server = function(input, output) {
# reactive data based on year selection ---
react_data = reactive({
select_year = as.numeric(input$select)
return(data_food[data_food$Year == select_year, ])
})
output$plot1 = renderPlot({
# used data based on selection from reactive ---
current_data = react_data()
# use food_plot() from helper_functions.R ---
food_plot(current_data, input$select)
})
}
shinyApp(ui = ui, server = server)
install.pacakges("rsconnect")
install.packages("rsconnect")
getwd()
rsconnect::deployApp("/Users/alfredorojas/Dropbox/BIOS_611_2019/GitHub/bios611-projects-fall-2019-ajLuna7/project_2")
View(data_food)
